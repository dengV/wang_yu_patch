// 根据穿过来的jsType 进行类型转换
// 实现OC的类型系统
var gStructFactory;
function typeConvert(jsType){
   var lowerCaseType = typeof jsType === 'string'? jsType.toLowerCase():null;
 if(lowerCaseType == "string"){
   return '@';
 }else if (lowerCaseType === "number"){
   return '@';
 }else if(lowerCaseType === "function"||lowerCaseType == "block"){
   return '@?';
 }else if (lowerCaseType === "boolean"){
   return 'B' ;
 }else if (lowerCaseType === "undefined"||lowerCaseType ==="void"){
   return 'v';
 }else if (lowerCaseType === "char"){
   return 'c';
 }else if (lowerCaseType === "unsignedchar" ){
   return 'C';
 }else if (lowerCaseType === "short"){
   return 's';
 }else if (lowerCaseType === "unsignedshort"){
   return 'S';
 }else if (lowerCaseType === "int"){
   return 'i';
 }else if (lowerCaseType === "unsignedint"){
   return 'I';
 }else if (lowerCaseType === "long"){
   return 'l';
 }else if (lowerCaseType === "unsignedlong"){
   return 'L';
  }else if (lowerCaseType === "longlong"){
   return 'q';
 }else if (lowerCaseType === "unsignedlonglong"){
   return 'Q';
 }else if (lowerCaseType === "nsinteger" ){
   return 'q';
 }else if (lowerCaseType === "nsuinteger"){
   return 'Q';
 }
 else if (lowerCaseType === "float"){
   return 'f';
 }else if (lowerCaseType === "double"){
   return 'd';
 }else if (lowerCaseType === "bool"){
   return 'B';
 }else if (lowerCaseType === "id"){
  return '@';
 }else if (lowerCaseType === "nsrange"){
  return gStructFactory.fetchStructType("_NSRange");
 }
 else{
  return gStructFactory.fetchStructType(jsType); 
 }
};

function StructTypeFactory(){
    this.registerTypes = {};
}
StructTypeFactory.prototype.registerType = function(typeName,typeProto){
  delete typeProto["type"]; // 删除type的值
  var prefix  = typeName.match(/^\$*/g)[0];
  let processedTypeName = typeName.replace(/^\$*/g,""); 
   var encoding = '{'+processedTypeName+'=';
 
   var sortedArray = Object.keys(typeProto).sort();
   for(index  in  sortedArray){
       type = typeProto[index];
       var typeEncoding = typeConvert(type);
       if (typeEncoding != null){
          encoding = encoding + typeEncoding;
       }else{
           if (type instanceof Object){
               if(type["type"] == null){
                   throw "type proto miss type define!"
               } 
                var key = '$'+prefix +type["type"];
                 this.registerType(key, type);
                encoding = encoding + this.registerTypes[key];
                delete this.registerTypes[key];
           }else{
               throw "current type is not supported";
           }
       }
   } 
    encoding = encoding + '}';
       this.registerTypes[typeName] = encoding; 
}

StructTypeFactory.prototype.fetchStructType = function(typeName){
     return this.registerTypes[typeName];
}
 gStructFactory = new StructTypeFactory();
 gStructFactory.registerType('CGSize',{0:'double',1:'double'});
 gStructFactory.registerType('CGPoint',{0:'double',1:'double'});
 gStructFactory.registerType('CGRect',{0:'CGPoint',1:'CGSize'});
 gStructFactory.registerType('_NSRange',{0:'nsuinteger',1:'nsuinteger'});

module.exports = typeConvert;